// test generated by openai

import {
  equalsIgnoreCase,
  equalsAnyIgnoreCase,
  includesIgnoreCase,
  includesAnyIgnoreCase,
  startsWithIgnoreCase,
  startsWithAnyIgnoreCase,
} from './your-utils-file';

describe('equalsIgnoreCase', () => {
  it('should return true if two strings are equal ignoring case', () => {
    expect(equalsIgnoreCase('Hello', 'hello')).toBe(true);
  });

  it('should return false if two strings are not equal ignoring case', () => {
    expect(equalsIgnoreCase('Hello', 'world')).toBe(false);
  });

  it('should handle undefined input', () => {
    expect(equalsIgnoreCase(undefined, 'hello')).toBe(false);
    expect(equalsIgnoreCase('Hello', undefined)).toBe(false);
    expect(equalsIgnoreCase(undefined, undefined)).toBe(true);
  });
});

describe('equalsAnyIgnoreCase', () => {
  it('should return true if any string in an array matches the input ignoring case', () => {
    expect(equalsAnyIgnoreCase('Hello', 'world', 'HELLO')).toBe(true);
  });

  it('should return false if none of the strings in the array match the input ignoring case', () => {
    expect(equalsAnyIgnoreCase('Hi', 'hey', 'bye')).toBe(false);
  });

  it('should handle undefined input', () => {
    expect(equalsAnyIgnoreCase(undefined, 'hello', 'world')).toBe(false);
    expect(equalsAnyIgnoreCase('Hello', undefined)).toBe(false);
  });
});

describe('includesIgnoreCase', () => {
  it('should return true if the second string is included in the first ignoring case', () => {
    expect(includesIgnoreCase('Hello world', 'HELLO')).toBe(true);
  });

  it('should return false if the second string is not included in the first ignoring case', () => {
    expect(includesIgnoreCase('Hi there', 'hello')).toBe(false);
  });

  it('should handle undefined input', () => {
    expect(includesIgnoreCase(undefined, 'hello')).toBe(false);
    expect(includesIgnoreCase('Hello', undefined)).toBe(false);
  });
});

describe('includesAnyIgnoreCase', () => {
  it('should return true if any string in the array is included in the input ignoring case', () => {
    expect(includesAnyIgnoreCase('Hello world', 'Hi', 'WORLD')).toBe(true);
  });

  it('should return false if none of the strings in the array are included in the input ignoring case', () => {
    expect(includesAnyIgnoreCase('Hi there', 'hello', 'bye')).toBe(false);
  });

  it('should handle undefined input', () => {
    expect(includesAnyIgnoreCase(undefined, 'hello', 'world')).toBe(false);
    expect(includesAnyIgnoreCase('Hello', undefined)).toBe(false);
  });
});

describe('startsWithIgnoreCase', () => {
  it('should return true if the first string starts with the second ignoring case', () => {
    expect(startsWithIgnoreCase('Hello world', 'HELLO')).toBe(true);
  });

  it('should return false if the first string does not start with the second ignoring case', () => {
    expect(startsWithIgnoreCase('Hi there', 'hello')).toBe(false);
  });

  it('should handle undefined input', () => {
    expect(startsWithIgnoreCase(undefined, 'hello')).toBe(false);
    expect(startsWithIgnoreCase('Hello', undefined)).toBe(false);
  });
});

describe('startsWithAnyIgnoreCase', () => {
  it('should return true if the input starts with any string in the array ignoring case', () => {
    expect(startsWithAnyIgnoreCase('Hello world', 'Hi', 'HELLO')).toBe(true);
  });

  it('should return false if the input does not start with any string in the array ignoring case', () => {
    expect(startsWithAnyIgnoreCase('Hi there', 'hello', 'bye')).toBe(false);
  });

  it('should handle undefined input', () => {
    expect(startsWithAnyIgnoreCase(undefined, 'hello', 'world')).toBe(false);
    expect(startsWithAnyIgnoreCase('Hello', undefined)).toBe(false);
  });
});

