// tests generated by openai
package svc

import (
	"context"
	"testing"

	"github.com/sashabaranov/go-openai"
)

type mockOpenaiClient struct{}

func (m *mockOpenaiClient) CreateChatCompletion(ctx context.Context, req openai.ChatCompletionRequest) (openai.ChatCompletionResponse, error) {
	return openai.ChatCompletionResponse{
		Choices: []openai.ChatCompletionChoice{
			{Message: openai.ChatCompletionMessage{Content: "Mock AI response"}},
		},
	}, nil
}

type mockChatHistoryService struct {
	history []ChatMessage
}

func (m *mockChatHistoryService) AddToHistory(msg ChatMessage) {
	m.history = append(m.history, msg)
}

func (m *mockChatHistoryService) CreateSystemMessage(msg string) ChatMessage {
	return ChatMessage{Role: "System", Content: msg}
}

func (m *mockChatHistoryService) CreateUserMessage(msg string) ChatMessage {
	return ChatMessage{Role: "User", Content: msg}
}

func (m *mockChatHistoryService) GetHistory() []ChatMessage {
	return m.history
}

func (m *mockChatHistoryService) CreateAIMessage(msg string) ChatMessage {
	return ChatMessage{Role: "assistant", Content: msg}
}

func TestChatService_InvokeUserQuery(t *testing.T) {
	ctx := context.Background()
	openaiClient := &mockOpenaiClient{}
	model := "test-model"
	history := &mockChatHistoryService{}

	chatService := NewChatService(ctx, openaiClient, model, history)

	query := "Hello, World!"
	_, err := chatService.InvokeUserQuery(query)
	if err != nil {
		t.Errorf("Unexpected error: %v", err)
	}

	historyMessages := history.GetHistory()
	if len(historyMessages) != 2 {
		t.Errorf("Expected history length: 2, got %d", len(historyMessages))
	}

	if historyMessages[1].Content != "Mock AI response" {
		t.Errorf("Unexpected AI response: %s", historyMessages[1].Content)
	}
}