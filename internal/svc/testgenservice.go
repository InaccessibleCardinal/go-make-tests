package svc

import (
	"context"
	"fmt"
	"go-make-tests/internal/colors"
	"log"
	"os"
	"strings"

	"github.com/sashabaranov/go-openai"
)

func AskForTest(language, framework, codeInput, outfile string) {
	svc := getChatter()
	prompt := getPrompt(language, framework)

	svc.Prompt(prompt)
	log.Println(colors.Blue("Asking AI..."))
	result, err := svc.InvokeUserQuery(codeInput)
	panicIfErr(err, "Failed AI service call")

	processed := processContent(result.Content, language)
	writeTestResult(outfile, processed)
	resultToStdOut(processed)
}

func getChatter() ChatServiceIface {
	ctx := context.Background()
	client := openai.NewClient(os.Getenv("OPEN_AI_API_KEY"))
	return NewChatService(ctx, client, openai.GPT3Dot5Turbo, NewChatHistoryService())
}

func getPrompt(language, framework string) string {
	return  fmt.Sprintf(
		`You are an expert %s programmer.
		Given the provided code, please write a unit test for it in the %s testing framework.
		Try to achieve total code coverage.
		Only return the code.`, language, framework)
}

func processContent(content, language string) string {
	cleanedContent := strings.Replace(content, fmt.Sprintf("```%s", language), "// test generated by openai\n", 1)
	return strings.Replace(cleanedContent, "```", "", 1)
}

func writeTestResult(fileName, codeContent string) {
	err := os.WriteFile(fileName, []byte(codeContent), 0777)
	panicIfErr(err, "Failed to write file")
}

func resultToStdOut(result string) {
	log.Println(colors.Green("Success"))
	log.Println(result)
}

func panicIfErr(err error, msg string) {
	if err != nil {
		log.Fatalf("%s: %s", colors.Red(msg), err.Error())
	}
}