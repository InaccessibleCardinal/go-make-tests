{"Language":"Go","Framework":"standard library","CodeInput":"package rest\n\nimport (\n\t\"io\"\n\t\"net/http\"\n)\n\ntype RestClientIface interface {\n}\n\nfunc Doit() {\n\n}\n\ntype RestClient struct {\n\tclient  *http.Client\n\trequest *http.Request\n\turl     string\n\terr     error\n}\n\ntype RestResponse struct {\n\tBody       []byte\n\tStatusCode int\n}\n\nfunc New(clientOverride *http.Client) *RestClient {\n\tif clientOverride != nil {\n\t\treturn \u0026RestClient{client: clientOverride}\n\t}\n\treturn \u0026RestClient{client: http.DefaultClient}\n}\n\nfunc (rc *RestClient) Url(url string) *RestClient {\n\trc.url = url\n\treturn rc\n}\n\nfunc (rc *RestClient) Get() *RestClient {\n\treq, err := http.NewRequest(http.MethodGet, rc.url, nil)\n\tif err != nil {\n\t\trc.err = err\n\t}\n\trc.request = req\n\treturn rc\n}\n\nfunc (rc *RestClient) Post(body io.Reader) *RestClient {\n\treq, err := http.NewRequest(http.MethodPost, rc.url, body)\n\tif err != nil {\n\t\trc.err = err\n\t}\n\trc.request = req\n\treturn rc\n}\n\nfunc (rc *RestClient) Put(body io.Reader) *RestClient {\n\treq, err := http.NewRequest(http.MethodPut, rc.url, body)\n\tif err != nil {\n\t\trc.err = err\n\t}\n\trc.request = req\n\treturn rc\n}\n\nfunc (rc *RestClient) Delete(body io.Reader) *RestClient {\n\treq, err := http.NewRequest(http.MethodDelete, rc.url, body)\n\tif err != nil {\n\t\trc.err = err\n\t}\n\trc.request = req\n\treturn rc\n}\n\nfunc (rc *RestClient) Headers(headers map[string]string) *RestClient {\n\tfor key, value := range headers {\n\t\trc.request.Header.Add(key, value)\n\t}\n\treturn rc\n}\n\nfunc (rc *RestClient) Do() (*RestResponse, error) {\n\tif rc.err != nil {\n\t\treturn nil, rc.err\n\t}\n\tres, err := rc.client.Do(rc.request)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\n\tbody, err := io.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn \u0026RestResponse{Body: body, StatusCode: res.StatusCode}, nil\n}\n","OutFile":"internal/svc/rest/restclient_test.go"}